// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rank.sql

package db

import (
	"context"
)

const rankByLevel = `-- name: RankByLevel :many
SELECT id, owner, score, level, created_at FROM scores
ORDER BY level DESC
LIMIT $1
OFFSET $2
`

type RankByLevelParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) RankByLevel(ctx context.Context, arg RankByLevelParams) ([]Score, error) {
	rows, err := q.db.Query(ctx, rankByLevel, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Score{}
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Score,
			&i.Level,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rankByScore = `-- name: RankByScore :many
SELECT id, owner, score, level, created_at FROM scores
ORDER BY score DESC
LIMIT $1
OFFSET $2
`

type RankByScoreParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) RankByScore(ctx context.Context, arg RankByScoreParams) ([]Score, error) {
	rows, err := q.db.Query(ctx, rankByScore, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Score{}
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Score,
			&i.Level,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
