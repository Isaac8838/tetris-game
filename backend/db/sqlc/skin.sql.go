// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: skin.sql

package db

import (
	"context"
)

const createSkin = `-- name: CreateSkin :one
INSERT INTO skins (
    owner,
    skin_id,
    default_skin
) VALUES (
    $1, $2, $3
) RETURNING owner, skin_id, default_skin
`

type CreateSkinParams struct {
	Owner       string `json:"owner"`
	SkinID      int32  `json:"skin_id"`
	DefaultSkin bool   `json:"default_skin"`
}

func (q *Queries) CreateSkin(ctx context.Context, arg CreateSkinParams) (Skin, error) {
	row := q.db.QueryRow(ctx, createSkin, arg.Owner, arg.SkinID, arg.DefaultSkin)
	var i Skin
	err := row.Scan(&i.Owner, &i.SkinID, &i.DefaultSkin)
	return i, err
}

const getDefaultSkin = `-- name: GetDefaultSkin :one
SELECT owner, skin_id, default_skin FROM skins
WHERE owner = $1 AND default_skin IS TRUE
LIMIT 1
`

func (q *Queries) GetDefaultSkin(ctx context.Context, owner string) (Skin, error) {
	row := q.db.QueryRow(ctx, getDefaultSkin, owner)
	var i Skin
	err := row.Scan(&i.Owner, &i.SkinID, &i.DefaultSkin)
	return i, err
}

const listSkins = `-- name: ListSkins :many
SELECT owner, skin_id, default_skin FROM skins
WHERE owner = $1
ORDER BY skin_id ASC
`

func (q *Queries) ListSkins(ctx context.Context, owner string) ([]Skin, error) {
	rows, err := q.db.Query(ctx, listSkins, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Skin{}
	for rows.Next() {
		var i Skin
		if err := rows.Scan(&i.Owner, &i.SkinID, &i.DefaultSkin); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkin = `-- name: UpdateSkin :one
UPDATE skins
SET
    default_skin = COALESCE($1, default_skin)
WHERE
    owner = $2 AND skin_id = $3
RETURNING owner, skin_id, default_skin
`

type UpdateSkinParams struct {
	DefaultSkin bool   `json:"default_skin"`
	Owner       string `json:"owner"`
	SkinID      int32  `json:"skin_id"`
}

func (q *Queries) UpdateSkin(ctx context.Context, arg UpdateSkinParams) (Skin, error) {
	row := q.db.QueryRow(ctx, updateSkin, arg.DefaultSkin, arg.Owner, arg.SkinID)
	var i Skin
	err := row.Scan(&i.Owner, &i.SkinID, &i.DefaultSkin)
	return i, err
}
