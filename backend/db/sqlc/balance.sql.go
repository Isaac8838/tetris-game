// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: balance.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBalance = `-- name: CreateBalance :one
INSERT INTO balances (
    owner,
    balance
) VALUES (
    $1, $2
)
RETURNING owner, balance, created_at, updated_at
`

type CreateBalanceParams struct {
	Owner   string      `json:"owner"`
	Balance pgtype.Int8 `json:"balance"`
}

func (q *Queries) CreateBalance(ctx context.Context, arg CreateBalanceParams) (Balance, error) {
	row := q.db.QueryRow(ctx, createBalance, arg.Owner, arg.Balance)
	var i Balance
	err := row.Scan(
		&i.Owner,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBalance = `-- name: GetBalance :one
SELECT owner, balance, created_at, updated_at FROM balances
WHERE owner = $1
LIMIT 1
`

func (q *Queries) GetBalance(ctx context.Context, owner string) (Balance, error) {
	row := q.db.QueryRow(ctx, getBalance, owner)
	var i Balance
	err := row.Scan(
		&i.Owner,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE balances
SET
    balance = COALESCE($1, balance),
    updated_at = COALESCE($2, updated_at)
WHERE 
    owner = $3
RETURNING owner, balance, created_at, updated_at
`

type UpdateBalanceParams struct {
	Balance   pgtype.Int8        `json:"balance"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Owner     string             `json:"owner"`
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (Balance, error) {
	row := q.db.QueryRow(ctx, updateBalance, arg.Balance, arg.UpdatedAt, arg.Owner)
	var i Balance
	err := row.Scan(
		&i.Owner,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
