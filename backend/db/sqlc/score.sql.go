// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: score.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createScore = `-- name: CreateScore :one
INSERT INTO scores (
    owner,
    score,
    level
) VALUES (
    $1, $2, $3
)
RETURNING id, owner, score, level, created_at
`

type CreateScoreParams struct {
	Owner string      `json:"owner"`
	Score pgtype.Int8 `json:"score"`
	Level pgtype.Int4 `json:"level"`
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) (Score, error) {
	row := q.db.QueryRow(ctx, createScore, arg.Owner, arg.Score, arg.Level)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Score,
		&i.Level,
		&i.CreatedAt,
	)
	return i, err
}

const listScores = `-- name: ListScores :many
SELECT id, owner, score, level, created_at FROM scores
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListScoresParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListScores(ctx context.Context, arg ListScoresParams) ([]Score, error) {
	rows, err := q.db.Query(ctx, listScores, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Score{}
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Score,
			&i.Level,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
