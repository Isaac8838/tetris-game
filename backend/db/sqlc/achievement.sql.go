// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: achievement.sql

package db

import (
	"context"
)

const createAchievement = `-- name: CreateAchievement :one
INSERT INTO achievements (
    owner,
    achievement_id
) VALUES (
    $1, $2
)
RETURNING owner, achievement_id, achieved_at
`

type CreateAchievementParams struct {
	Owner         string `json:"owner"`
	AchievementID int32  `json:"achievement_id"`
}

func (q *Queries) CreateAchievement(ctx context.Context, arg CreateAchievementParams) (Achievement, error) {
	row := q.db.QueryRow(ctx, createAchievement, arg.Owner, arg.AchievementID)
	var i Achievement
	err := row.Scan(&i.Owner, &i.AchievementID, &i.AchievedAt)
	return i, err
}

const getAchievement = `-- name: GetAchievement :one
SELECT owner, achievement_id, achieved_at FROM achievements
WHERE owner = $1 AND (achievement_id >= $2 AND achievement_id <= $3)
ORDER BY achievement_id DESC
LIMIT 1
`

type GetAchievementParams struct {
	Owner           string `json:"owner"`
	AchievementID   int32  `json:"achievement_id"`
	AchievementID_2 int32  `json:"achievement_id_2"`
}

func (q *Queries) GetAchievement(ctx context.Context, arg GetAchievementParams) (Achievement, error) {
	row := q.db.QueryRow(ctx, getAchievement, arg.Owner, arg.AchievementID, arg.AchievementID_2)
	var i Achievement
	err := row.Scan(&i.Owner, &i.AchievementID, &i.AchievedAt)
	return i, err
}

const listAchievements = `-- name: ListAchievements :many
SELECT owner, achievement_id, achieved_at FROM achievements
WHERE owner = $1
ORDER BY achievement_id
LIMIT 10
`

func (q *Queries) ListAchievements(ctx context.Context, owner string) ([]Achievement, error) {
	rows, err := q.db.Query(ctx, listAchievements, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Achievement{}
	for rows.Next() {
		var i Achievement
		if err := rows.Scan(&i.Owner, &i.AchievementID, &i.AchievedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
