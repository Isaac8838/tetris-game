// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/isaac8838/tetris-game/db/sqlc (interfaces: DBQTx)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/dbqtx.go github.com/isaac8838/tetris-game/db/sqlc DBQTx
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/isaac8838/tetris-game/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockDBQTx is a mock of DBQTx interface.
type MockDBQTx struct {
	ctrl     *gomock.Controller
	recorder *MockDBQTxMockRecorder
}

// MockDBQTxMockRecorder is the mock recorder for MockDBQTx.
type MockDBQTxMockRecorder struct {
	mock *MockDBQTx
}

// NewMockDBQTx creates a new mock instance.
func NewMockDBQTx(ctrl *gomock.Controller) *MockDBQTx {
	mock := &MockDBQTx{ctrl: ctrl}
	mock.recorder = &MockDBQTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBQTx) EXPECT() *MockDBQTxMockRecorder {
	return m.recorder
}

// CreateAchievement mocks base method.
func (m *MockDBQTx) CreateAchievement(arg0 context.Context, arg1 db.CreateAchievementParams) (db.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAchievement", arg0, arg1)
	ret0, _ := ret[0].(db.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAchievement indicates an expected call of CreateAchievement.
func (mr *MockDBQTxMockRecorder) CreateAchievement(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAchievement", reflect.TypeOf((*MockDBQTx)(nil).CreateAchievement), arg0, arg1)
}

// CreateAchievementTx mocks base method.
func (m *MockDBQTx) CreateAchievementTx(arg0 context.Context, arg1 db.CreateAchievementTxParams) (db.CreateAchievementTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAchievementTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAchievementTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAchievementTx indicates an expected call of CreateAchievementTx.
func (mr *MockDBQTxMockRecorder) CreateAchievementTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAchievementTx", reflect.TypeOf((*MockDBQTx)(nil).CreateAchievementTx), arg0, arg1)
}

// CreateBalance mocks base method.
func (m *MockDBQTx) CreateBalance(arg0 context.Context, arg1 db.CreateBalanceParams) (db.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalance", arg0, arg1)
	ret0, _ := ret[0].(db.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBalance indicates an expected call of CreateBalance.
func (mr *MockDBQTxMockRecorder) CreateBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalance", reflect.TypeOf((*MockDBQTx)(nil).CreateBalance), arg0, arg1)
}

// CreateBalanceTx mocks base method.
func (m *MockDBQTx) CreateBalanceTx(arg0 context.Context, arg1 db.CreateBalanceTxParams) (db.CreateBalanceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalanceTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateBalanceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBalanceTx indicates an expected call of CreateBalanceTx.
func (mr *MockDBQTxMockRecorder) CreateBalanceTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalanceTx", reflect.TypeOf((*MockDBQTx)(nil).CreateBalanceTx), arg0, arg1)
}

// CreateScore mocks base method.
func (m *MockDBQTx) CreateScore(arg0 context.Context, arg1 db.CreateScoreParams) (db.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScore", arg0, arg1)
	ret0, _ := ret[0].(db.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScore indicates an expected call of CreateScore.
func (mr *MockDBQTxMockRecorder) CreateScore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScore", reflect.TypeOf((*MockDBQTx)(nil).CreateScore), arg0, arg1)
}

// CreateScoreTx mocks base method.
func (m *MockDBQTx) CreateScoreTx(arg0 context.Context, arg1 db.CreateScoreTxParams) (db.CreateScoreTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScoreTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateScoreTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScoreTx indicates an expected call of CreateScoreTx.
func (mr *MockDBQTxMockRecorder) CreateScoreTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScoreTx", reflect.TypeOf((*MockDBQTx)(nil).CreateScoreTx), arg0, arg1)
}

// CreateSkin mocks base method.
func (m *MockDBQTx) CreateSkin(arg0 context.Context, arg1 db.CreateSkinParams) (db.Skin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSkin", arg0, arg1)
	ret0, _ := ret[0].(db.Skin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSkin indicates an expected call of CreateSkin.
func (mr *MockDBQTxMockRecorder) CreateSkin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSkin", reflect.TypeOf((*MockDBQTx)(nil).CreateSkin), arg0, arg1)
}

// CreateSkinTx mocks base method.
func (m *MockDBQTx) CreateSkinTx(arg0 context.Context, arg1 db.CreateSkinTxParams) (db.CreateSkinTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSkinTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateSkinTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSkinTx indicates an expected call of CreateSkinTx.
func (mr *MockDBQTxMockRecorder) CreateSkinTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSkinTx", reflect.TypeOf((*MockDBQTx)(nil).CreateSkinTx), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockDBQTx) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBQTxMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBQTx)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockDBQTx) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockDBQTxMockRecorder) CreateUserTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockDBQTx)(nil).CreateUserTx), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockDBQTx) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDBQTxMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDBQTx)(nil).DeleteUser), arg0, arg1)
}

// GetAchievement mocks base method.
func (m *MockDBQTx) GetAchievement(arg0 context.Context, arg1 db.GetAchievementParams) (db.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchievement", arg0, arg1)
	ret0, _ := ret[0].(db.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchievement indicates an expected call of GetAchievement.
func (mr *MockDBQTxMockRecorder) GetAchievement(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchievement", reflect.TypeOf((*MockDBQTx)(nil).GetAchievement), arg0, arg1)
}

// GetBalance mocks base method.
func (m *MockDBQTx) GetBalance(arg0 context.Context, arg1 string) (db.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(db.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockDBQTxMockRecorder) GetBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockDBQTx)(nil).GetBalance), arg0, arg1)
}

// GetDefaultSkin mocks base method.
func (m *MockDBQTx) GetDefaultSkin(arg0 context.Context, arg1 string) (db.Skin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultSkin", arg0, arg1)
	ret0, _ := ret[0].(db.Skin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultSkin indicates an expected call of GetDefaultSkin.
func (mr *MockDBQTxMockRecorder) GetDefaultSkin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultSkin", reflect.TypeOf((*MockDBQTx)(nil).GetDefaultSkin), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockDBQTx) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDBQTxMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDBQTx)(nil).GetUser), arg0, arg1)
}

// ListAchievements mocks base method.
func (m *MockDBQTx) ListAchievements(arg0 context.Context, arg1 string) ([]db.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAchievements", arg0, arg1)
	ret0, _ := ret[0].([]db.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAchievements indicates an expected call of ListAchievements.
func (mr *MockDBQTxMockRecorder) ListAchievements(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAchievements", reflect.TypeOf((*MockDBQTx)(nil).ListAchievements), arg0, arg1)
}

// ListScores mocks base method.
func (m *MockDBQTx) ListScores(arg0 context.Context, arg1 db.ListScoresParams) ([]db.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScores", arg0, arg1)
	ret0, _ := ret[0].([]db.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScores indicates an expected call of ListScores.
func (mr *MockDBQTxMockRecorder) ListScores(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScores", reflect.TypeOf((*MockDBQTx)(nil).ListScores), arg0, arg1)
}

// ListSkins mocks base method.
func (m *MockDBQTx) ListSkins(arg0 context.Context, arg1 string) ([]db.Skin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkins", arg0, arg1)
	ret0, _ := ret[0].([]db.Skin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkins indicates an expected call of ListSkins.
func (mr *MockDBQTxMockRecorder) ListSkins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkins", reflect.TypeOf((*MockDBQTx)(nil).ListSkins), arg0, arg1)
}

// RankByLevel mocks base method.
func (m *MockDBQTx) RankByLevel(arg0 context.Context, arg1 db.RankByLevelParams) ([]db.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RankByLevel", arg0, arg1)
	ret0, _ := ret[0].([]db.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RankByLevel indicates an expected call of RankByLevel.
func (mr *MockDBQTxMockRecorder) RankByLevel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RankByLevel", reflect.TypeOf((*MockDBQTx)(nil).RankByLevel), arg0, arg1)
}

// RankByScore mocks base method.
func (m *MockDBQTx) RankByScore(arg0 context.Context, arg1 db.RankByScoreParams) ([]db.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RankByScore", arg0, arg1)
	ret0, _ := ret[0].([]db.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RankByScore indicates an expected call of RankByScore.
func (mr *MockDBQTxMockRecorder) RankByScore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RankByScore", reflect.TypeOf((*MockDBQTx)(nil).RankByScore), arg0, arg1)
}

// UpdateBalance mocks base method.
func (m *MockDBQTx) UpdateBalance(arg0 context.Context, arg1 db.UpdateBalanceParams) (db.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", arg0, arg1)
	ret0, _ := ret[0].(db.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockDBQTxMockRecorder) UpdateBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockDBQTx)(nil).UpdateBalance), arg0, arg1)
}

// UpdateBalanceTx mocks base method.
func (m *MockDBQTx) UpdateBalanceTx(arg0 context.Context, arg1 db.UpdateBalanceTxParams) (db.UpdateBalanceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceTx", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateBalanceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalanceTx indicates an expected call of UpdateBalanceTx.
func (mr *MockDBQTxMockRecorder) UpdateBalanceTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceTx", reflect.TypeOf((*MockDBQTx)(nil).UpdateBalanceTx), arg0, arg1)
}

// UpdateSkin mocks base method.
func (m *MockDBQTx) UpdateSkin(arg0 context.Context, arg1 db.UpdateSkinParams) (db.Skin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkin", arg0, arg1)
	ret0, _ := ret[0].(db.Skin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSkin indicates an expected call of UpdateSkin.
func (mr *MockDBQTxMockRecorder) UpdateSkin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkin", reflect.TypeOf((*MockDBQTx)(nil).UpdateSkin), arg0, arg1)
}

// UpdateSkinTx mocks base method.
func (m *MockDBQTx) UpdateSkinTx(arg0 context.Context, arg1 db.UpdateSkinTxParams) (db.UpdateSkinTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkinTx", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateSkinTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSkinTx indicates an expected call of UpdateSkinTx.
func (mr *MockDBQTxMockRecorder) UpdateSkinTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkinTx", reflect.TypeOf((*MockDBQTx)(nil).UpdateSkinTx), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockDBQTx) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDBQTxMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDBQTx)(nil).UpdateUser), arg0, arg1)
}
