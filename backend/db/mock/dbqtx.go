// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/isaac8838/tetris-game/db/sqlc (interfaces: DBQTx)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/dbqtx.go github.com/isaac8838/tetris-game/db/sqlc DBQTx
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/isaac8838/tetris-game/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockDBQTx is a mock of DBQTx interface.
type MockDBQTx struct {
	ctrl     *gomock.Controller
	recorder *MockDBQTxMockRecorder
}

// MockDBQTxMockRecorder is the mock recorder for MockDBQTx.
type MockDBQTxMockRecorder struct {
	mock *MockDBQTx
}

// NewMockDBQTx creates a new mock instance.
func NewMockDBQTx(ctrl *gomock.Controller) *MockDBQTx {
	mock := &MockDBQTx{ctrl: ctrl}
	mock.recorder = &MockDBQTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBQTx) EXPECT() *MockDBQTxMockRecorder {
	return m.recorder
}

// CreateScore mocks base method.
func (m *MockDBQTx) CreateScore(arg0 context.Context, arg1 db.CreateScoreParams) (db.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScore", arg0, arg1)
	ret0, _ := ret[0].(db.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScore indicates an expected call of CreateScore.
func (mr *MockDBQTxMockRecorder) CreateScore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScore", reflect.TypeOf((*MockDBQTx)(nil).CreateScore), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockDBQTx) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBQTxMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBQTx)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockDBQTx) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockDBQTxMockRecorder) CreateUserTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockDBQTx)(nil).CreateUserTx), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockDBQTx) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDBQTxMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDBQTx)(nil).DeleteUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockDBQTx) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDBQTxMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDBQTx)(nil).GetUser), arg0, arg1)
}

// ListScores mocks base method.
func (m *MockDBQTx) ListScores(arg0 context.Context, arg1 db.ListScoresParams) ([]db.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScores", arg0, arg1)
	ret0, _ := ret[0].([]db.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScores indicates an expected call of ListScores.
func (mr *MockDBQTxMockRecorder) ListScores(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScores", reflect.TypeOf((*MockDBQTx)(nil).ListScores), arg0, arg1)
}

// RankByLevel mocks base method.
func (m *MockDBQTx) RankByLevel(arg0 context.Context, arg1 db.RankByLevelParams) ([]db.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RankByLevel", arg0, arg1)
	ret0, _ := ret[0].([]db.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RankByLevel indicates an expected call of RankByLevel.
func (mr *MockDBQTxMockRecorder) RankByLevel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RankByLevel", reflect.TypeOf((*MockDBQTx)(nil).RankByLevel), arg0, arg1)
}

// RankByScore mocks base method.
func (m *MockDBQTx) RankByScore(arg0 context.Context, arg1 db.RankByScoreParams) ([]db.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RankByScore", arg0, arg1)
	ret0, _ := ret[0].([]db.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RankByScore indicates an expected call of RankByScore.
func (mr *MockDBQTxMockRecorder) RankByScore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RankByScore", reflect.TypeOf((*MockDBQTx)(nil).RankByScore), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockDBQTx) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDBQTxMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDBQTx)(nil).UpdateUser), arg0, arg1)
}
